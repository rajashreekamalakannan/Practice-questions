https://leetcode.com/problems/implement-stack-using-queues/


class MyStack {

    /** Initialize your data structure here. */
    static Queue<Integer> q1;
    static Queue<Integer> q2;
    static int top=-1;
    public MyStack() {
        q1 = new LinkedList<>();
        q2 = new LinkedList<>();
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        q1.add(x);
        top = x;    
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        while(!q1.isEmpty()) {
            int t = q1.poll();
            if(q1.size()==1) {
                top = t;
            }
            if(q1.size()==0) {
                Queue<Integer> temp = q1;
                q1 = q2;
                q2 = temp;
                return t;
            }
            q2.add(t);
        }
        return -1;
    }
    
    /** Get the top element. */
    public int top() {
        return top;
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
       return (q1.size()==0);
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
